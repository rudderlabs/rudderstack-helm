# Default values for rudderstack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

---
# Deployment specific values for rudderstack.
# Following values must be filled in for the deployment to succeed

# Please uncomment below lines and fill values accordingly.
# Please enter api token obtained from rudder dashboard below or specify existing secret, that contains rudderWorkspaceToken key
rudderWorkspaceToken: "replace-me"
rudderWorkspaceTokenExistingSecret: null

# -- Labels to apply to all resources
commonLabels: {}
# myLabel: aakkmd

gcpCredentialSecret:
  enabled: false
  jsonKeyFile: ""

global:
  imagePullSecrets: []

serviceAccount:
  create: false
  annotations: {}

backend:
  replicaCount: 1
  image:
    repository: rudderlabs/rudder-server
    tag: 1.43.1
    pullPolicy: IfNotPresent
  controlPlaneJSON: false
  ingress:
    enabled: false
    annotations: {}
    className: ""
    hostname: ""
    tls: false
    # -- Optional, Certificate Secret name
    secretName: ""
  service:
    # -- Annotations to be added to backend service
    annotations:
      ## Refer https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer for more annotations
      # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
      ## For enabling https on aws,
      ## uncomment below line with acm managed certificate arn and change port value below to 443
      # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    # -- Labels to be added to backend service
    labels: {}
    type: ClusterIP
    port: 80
    targetPort: 8080
  resources:
    requests:
      memory: 2560Mi
    limits:
      memory: 5120Mi

  # -- Labels to be added to the controller StatefulSet and other resources that do not have option to specify labels
  labels: {}
  # -- Labels to add to the backend pod container metadata
  podLabels: {}
  # -- Annotations to be added to backend pods
  podAnnotations: {}

  nodeSelector: {}

  persistence:
    enabled: true
    accessModes: [ReadWriteOnce]
    size: 36Gi
    storageClass: ""
    annotations: {}
  tolerations: []

  config:
    # eg. INFO, DEBUG, ERROR
    logLevel: INFO
    backup:
      enabled: false
      # -- object storage provider to store backups eg. S3, GCS, AZURE_BLOB, MINIO
      provider: S3
      bucket: ""
      statusBucket: ""
      aws:
        accessKey: ""
        secretKey: ""
    # -- rudder-server config overrides
    # See [config parameters](https://docs.rudderlabs.com/administrators-guide/config-parameters) for more details
    overrides: {}
      # enableStats: false
      # Logger:
      #  consoleJsonFormat: true

  extraEnvVars: []
    # - name: LOG_LEVEL
    #  value: "INFO"

transformer:
  replicaCount: 1
  service:
    type: ClusterIP
    port: 9090
  image:
    repository: rudderstack/rudder-transformer
    tag: 1.91.4
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: 256Mi
    limits:
      memory: 768Mi
  extraEnvVars:
    - name: CONFIG_BACKEND_URL
      value: "https://api.rudderlabs.com"
    - name: ENABLE_FUNCTIONS
      value: "true"

postgresql:
  enabled: true
  architecture: standalone
  auth:
    enablePostgresUser: false
    username: rudder
    password: password
    database: jobsdb
  primary:
    service:
      port: 5432
    persistence:
      enabled: true
      size: 100Gi
    resources:
      requests:
        memory: 2Gi
      limits:
        memory: 4Gi

# https://www.rudderstack.com/docs/user-guides/administrators-guide/monitoring-and-metrics/
# The backend uses statsd client to log stats.
telegraf_sidecar:
  enabled: false
  image:
    repository: telegraf
    tag: 1.12-alpine
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 128Mi
      cpu: 100m
  config:
    agent:
      interval: "10s"
    outputs:
      - influxdb:
          urls: []
          # - "http://influxdb.monitoring.svc:8086"
          database: "telegraf"
    statsd_percentiles: [50, 90, 95, 99]

affinity: {}
