# Default values for rudderstack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Deployment specific values for rudderstack.
# Following values must be filled in for the deployment to succeed

# Please uncomment below lines and fill values accordingly.
# Please enter api token obtained from rudder dashboard below or specify existing secret, that contains rudderWorkspaceToken key
# rudderWorkspaceToken:
# rudderWorkspaceTokenExistingSecret:

gcpCredentialSecret:
  enabled: false
  jsonKeyFile: ""
  mountPath: /etc/gcp

global:
  # backendReplicaCount decides the replica count for rudder backend and postgresql containers
  backendReplicaCount: 1
  imagePullSecrets: []
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""

backend:
  image:
    repository: rudderlabs/rudder-server
    version: latest
    pullPolicy: Always
  controlPlaneJSON: false
  ingress:
    enabled: false
    tls: false
    annotations: {}
    hostname: "rudderstack.local"
    # optional override for tls secret name
    # secretName: rudderstack-tls
  service:
    annotations:
      ## Refer https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer for more annotations
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
      ## For enabling https on aws,
      ## uncomment below line with acm managed certificate arn and change port value below to 443
      # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    type: LoadBalancer
    port: 80
    targetPort: 8080
  resources:
    requests:
      memory: 2560Mi
    limits:
      memory: 5120Mi

  nodeSelector: {}

  persistence:
    mountPath: /data/rudderstack
    accessModes:
      - ReadWriteOnce
    size: 36Gi
    annotations: {}
  tolerations: []

  config:
    mountPath: "/etc/rudderstack"

  rudderConfig: |
    maxProcess: 12
    gwDBRetention: 0h
    routerDBRetention: 0h
    enableProcessor: true
    enableRouter: true
    enableStats: true
    statsTagsFormat: influxdb
    Http:
      ReadTimeout: 0s
      ReadHeaderTimeout: 0s
      WriteTimeout: 10s
      IdleTimeout: 720s
      MaxHeaderBytes: 524288
    RateLimit:
      eventLimit: 1000
      rateLimitWindow: 60m
      noOfBucketsInWindow: 12
    Gateway:
      webPort: 8080
      maxUserWebRequestWorkerProcess: 64
      maxDBWriterProcess: 256
      CustomVal: GW
      maxUserRequestBatchSize: 128
      maxDBBatchSize: 128
      userWebRequestBatchTimeout: 15ms
      dbBatchWriteTimeout: 5ms
      maxReqSizeInKB: 4000
      enableRateLimit: false
      enableSuppressUserFeature: true
      allowPartialWriteWithErrors: true
      allowReqsWithoutUserIDAndAnonymousID: false
      webhook:
        batchTimeout: 20ms
        maxBatchSize: 32
        maxTransformerProcess: 64
        maxRetry: 5
        maxRetryTime: 10s
        sourceListForParsingParams:
          - shopify
    EventSchemas:
      enableEventSchemasFeature: false
      syncInterval: 240s
      noOfWorkers: 128
    Debugger:
      maxBatchSize: 32
      maxESQueueSize: 1024
      maxRetry: 3
      batchTimeout: 2s
      retrySleep: 100ms
    SourceDebugger:
      disableEventUploads: false
    DestinationDebugger:
      disableEventDeliveryStatusUploads: false
    TransformationDebugger:
      disableTransformationStatusUploads: false
    Archiver:
      backupRowsBatchSize: 100
    JobsDB:
      jobDoneMigrateThres: 0.8
      jobStatusMigrateThres: 5
      maxDSSize: 10000
      maxMigrateOnce: 10
      maxMigrateDSProbe: 10
      maxTableSizeInMB: 300
      migrateDSLoopSleepDuration: 30s
      addNewDSLoopSleepDuration: 5s
      refreshDSListLoopSleepDuration: 5s
      backupCheckSleepDuration: 5s
      backupRowsBatchSize: 1000
      archivalTimeInDays: 10
      archiverTickerTime: 1440m
      backup:
        enabled: true
        gw:
          enabled: true
          pathPrefix: ""
        rt:
          enabled: true
          failedOnly: true
        batch_rt:
          enabled: false
          failedOnly: false
    Router:
      jobQueryBatchSize: 10000
      updateStatusBatchSize: 1000
      readSleep: 1000ms
      fixedLoopSleep: 0ms
      noOfJobsPerChannel: 1000
      noOfJobsToBatchInAWorker: 20
      jobsBatchTimeout: 5s
      maxSleep: 60s
      minSleep: 0s
      maxStatusUpdateWait: 5s
      useTestSink: false
      guaranteeUserEventOrder: true
      kafkaWriteTimeout: 2s
      kafkaDialTimeout: 10s
      minRetryBackoff: 10s
      maxRetryBackoff: 300s
      noOfWorkers: 64
      allowAbortedUserJobsCountForProcessing: 1
      maxFailedCountForJob: 3
      retryTimeWindow: 180m
      failedKeysEnabled: false
      saveDestinationResponseOverride: false
      responseTransform: false
      MARKETO:
        noOfWorkers: 4
      throttler:
        MARKETO:
          limit: 45
          timeWindow: 20s
      BRAZE:
        forceHTTP1: true
        httpTimeout: 120s
        httpMaxIdleConnsPerHost: 32
    BatchRouter:
      mainLoopSleep: 2s
      jobQueryBatchSize: 100000
      uploadFreq: 30s
      warehouseServiceMaxRetryTime: 3h
      noOfWorkers: 8
      maxFailedCountForJob: 128
      retryTimeWindow: 180m
    Warehouse:
      mode: embedded
      webPort: 8082
      uploadFreq: 1800s
      noOfWorkers: 8
      noOfSlaveWorkerRoutines: 4
      mainLoopSleep: 5s
      minRetryAttempts: 3
      retryTimeWindow: 180m
      minUploadBackoff: 60s
      maxUploadBackoff: 1800s
      warehouseSyncPreFetchCount: 10
      warehouseSyncFreqIgnore: false
      stagingFilesBatchSize: 960
      enableIDResolution: false
      populateHistoricIdentities: false
      redshift:
        maxParallelLoads: 3
        setVarCharMax: false
      snowflake:
        maxParallelLoads: 3
      bigquery:
        maxParallelLoads: 20
      postgres:
        maxParallelLoads: 3
      mssql:
        maxParallelLoads: 3
      azure_synapse:
        maxParallelLoads: 3
      clickhouse:
        maxParallelLoads: 3
        queryDebugLogs: false
        blockSize: 1000
        poolSize: 10
        disableNullable: false
        enableArraySupport: false
    Processor:
      webPort: 8086
      loopSleep: 10ms
      maxLoopSleep: 5000ms
      fixedLoopSleep: 0ms
      maxLoopProcessEvents: 10000
      transformBatchSize: 100
      userTransformBatchSize: 200
      maxConcurrency: 200
      maxHTTPConnections: 100
      maxHTTPIdleConnections: 50
      maxRetry: 30
      retrySleep: 100ms
      timeoutDuration: 30s
      errReadLoopSleep: 30s
      errDBReadBatchSize: 1000
      noOfErrStashWorkers: 2
      maxFailedCountForErrJob: 3
      Stats:
        captureEventName: false
    Dedup:
      enableDedup: false
      dedupWindow: 3600s
    BackendConfig:
      configFromFile: false
      configJSONPath: /etc/rudderstack/workspaceConfig.json
      pollInterval: 5s
      regulationsPollInterval: 300s
      maxRegulationsPerRequest: 1000
    recovery:
      enabled: true
      errorStorePath: /tmp/error_store.json
      storagePath: /tmp/recovery_data.json
      normal:
        crashThreshold: 5
        duration: 300s
    Logger:
      enableConsole: true
      enableFile: false
      consoleJsonFormat: false
      fileJsonFormat: false
      logFileLocation: /tmp/rudder_log.log
      logFileSize: 100
      enableTimestamp: true
      enableFileNameInLog: true
      enableStackTrace: false
    Diagnostics:
      enableDiagnostics: true
      gatewayTimePeriod: 60s
      routerTimePeriod: 60s
      batchRouterTimePeriod: 6l
      enableServerStartMetric: true
      enableConfigIdentifyMetric: true
      enableServerStartedMetric: true
      enableConfigProcessedMetric: true
      enableGatewayMetric: true
      enableRouterMetric: true
      enableBatchRouterMetric: true
      enableDestinationFailuresMetric: true
    RuntimeStats:
      enabled: true
      statsCollectionInterval: 10
      enableCPUStats: true
      enableMemStats: true
      enableGCStats: true
    PgNotifier:
      retriggerInterval: 2s
      retriggerCount: 500
      trackBatchInterval: 2s
      maxAttempt: 3

  extraEnvVars:
    - name: CONFIG_BACKEND_URL
      value: "https://api.rudderlabs.com"
    - name: CONFIG_PATH
      value: "/etc/rudderstack/config.yaml"
    # These credentials are used for backing up successfully processed events
    - name: AWS_ACCESS_KEY_ID
      value: "Add your aws key id here"
    - name: AWS_SECRET_ACCESS_KEY
      value: "Add your aws access secret here"
    - name: RUDDER_TMPDIR
      value: "/data/rudderstack"
    - name: JOBS_BACKUP_STORAGE_PROVIDER
      value: "S3" # object storage provider to store backups eg. S3, GCS, AZURE_BLOB, MINIO
    - name: JOBS_BACKUP_BUCKET
      value: "Add your bucket name to store backups of incoming events"
    - name: JOB_STATUS_BACKUP_BUCKET
      value: "Add your bucket name to store backups of status of incoming events"
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/rudderstack/google-application-credentials.json"
    - name: LOG_LEVEL
      value: "INFO" # eg. DEBUG, ERROR

transformer:
  replicaCount: 1
  service:
    port: 9090
  image:
    repository: rudderlabs/rudder-transformer
    version: latest
    pullPolicy: Always
  resources:
    requests:
      memory: 256Mi
    limits:
      memory: 768Mi

postgresql:
  nameOverride: "rudderstack-postgresql"
  postgresqlUsername: rudder
  postgresqlPassword: password
  postgresqlDatabase: jobsdb
  postgresqlRunAsUser: 70
  imagePullPolicy: IfNotPresent
  image:
    repository: postgres
    tag: "11-alpine"
    pullPolicy: IfNotPresent
  persistence:
    size: 100Gi
  replication:
    enabled: false
  service:
    type: "ClusterIP"
    port: 5432
  resources:
    requests:
      memory: 2048Mi
    limits:
      memory: 4096Mi

telegraf_sidecar:
  enabled: true
  name: telegraf
  version: 1.5.0
  nameOverride: "rudderstack"
  image:
    repo: "telegraf"
    tag: "1.12-alpine"
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 128Mi
      cpu: 100m
  config:
    mountPath: /etc/telegraf
    agent:
      interval: "10s"
    outputs:
      - influxdb:
          urls: []
          #            - "http://influxdb.monitoring.svc:8086"
          database: "telegraf"
    statsd_percentiles:
      - 50
      - 90
      - 95
      - 99

affinity: {}
