# Default values for rudderstack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


# Deployment specific values for rudderstack.
# Following values must be filled in for the deployment to succeed

# Please uncomment below lines and fill values accordingly.
# Please enter api token obtained from rudder dashboard below
# rudderWorkspaceToken:


global:
  # backendReplicaCount decides the replica count for rudder backend and postgresql containers
  backendReplicaCount: 1
  imagePullSecrets: []
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""

backend:
  image:
    repository: rudderlabs/rudder-server
    version: latest
    pullPolicy: Always
  controlPlaneJSON: false
  service:
    annotations:
      ## Refer https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer for more annotations
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
      ## For enabling https on aws, 
      ## uncomment below line with acm managed certificate arn and change port value below to 443
      # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    type: LoadBalancer
    port: 80
    targetPort: 8080
  resources:
    requests:
      memory: 2560Mi
    limits:
      memory: 5120Mi

  nodeSelector: {}

  persistence:
    mountPath: /data/rudderstack
    accessModes:
      - ReadWriteOnce
    size: 36Gi
    annotations: {}
  tolerations: []

  config:
    mountPath: "/etc/rudderstack"

  extraEnvVars:
    - name: CONFIG_BACKEND_URL
      value: "https://api.rudderlabs.com"
    - name: CONFIG_PATH
      value: "/etc/rudderstack/config.toml"
    # These credentials are used for backing up successfully processed events
    - name: AWS_ACCESS_KEY_ID
      value: "Add your aws key id here"
    - name: AWS_SECRET_ACCESS_KEY
      value: "Add your aws access secret here"
    - name: BUGSNAG_KEY
      value: "3669852453c688bb50a0a2d27bf0ee58"
    - name: RUDDER_TMPDIR
      value: "/data/rudderstack"
    - name: JOBS_BACKUP_STORAGE_PROVIDER
      value: "S3" # object storage provider to store backups eg. S3, GCS, AZURE_BLOB, MINIO
    - name: JOBS_BACKUP_BUCKET
      value: "Add your bucket name to store backups of incoming events"
    - name: JOB_STATUS_BACKUP_BUCKET
      value: "Add your bucket name to store backups of status of incoming events"
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/rudderstack/google-application-credentials.json"
    - name: LOG_LEVEL
      value: "INFO" # eg. DEBUG, ERROR

transformer:
  replicaCount: 1
  service:
    port: 9090
  image:
    repository: rudderlabs/rudder-transformer
    version: latest
    pullPolicy: Always
  resources:
    requests:
      memory: 256Mi
    limits:
      memory: 768Mi

postgresql:
  enabled: true
  nameOverride: "rudderstack-postgresql"
  postgresqlUsername: rudder
  postgresqlPassword: password
  postgresqlDatabase: jobsdb
  postgresqlRunAsUser: 70
  imagePullPolicy: IfNotPresent
  image:
    repository: postgres
    tag: "11-alpine"
    pullPolicy: IfNotPresent
  persistence:
    size: 100Gi
  replication:
    enabled: false
  service:
    type: "ClusterIP"
    port: 5432
  resources:
    requests:
      memory: 2048Mi
    limits:
      memory: 4096Mi

telegraf_sidecar:
  enabled: true
  name: telegraf
  version: 1.5.0
  nameOverride: "rudderstack"
  image:
    repo: "telegraf"
    tag: "1.12-alpine"
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 128Mi
      cpu: 100m
  config:
    mountPath: /etc/telegraf
    agent:
      interval: "10s"
    outputs:
      - influxdb:
          urls: []
          #            - "http://influxdb.monitoring.svc:8086"
          database: "telegraf"
    statsd_percentiles:
      - 50
      - 90
      - 95
      - 99

affinity: {}
